# -*- coding: utf-8 -*-
"""DL1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17E46b4Thf8oz1BXqBfqRMAPDgpG7xd9Q
"""

import numpy as np

def step_function(v):
    return 1 if v >= 0 else 0

def perceptron(x, w, b):
    v = np.dot(w, x) + b
    return step_function(v)

def NOT(x):
    w = -1
    b = 0.5
    return perceptron(x, w, b)

def AND(x):
    w = np.array([1, 1])
    b = -1.5
    return perceptron(x, w, b)

def OR(x):
    w = np.array([1, 1])
    b = -0.5
    return perceptron(x, w, b)

def XOR(x):
    y1 = AND(x)
    y2 = OR(x)
    y3 = NOT(y1)
    final_x = np.array([y2, y3])
    return AND(final_x)

test1 = np.array([0, 1])
test2 = np.array([1, 1])
test3 = np.array([0, 0])
test4 = np.array([1, 0])

print("XOR({}, {}) = {}".format(0, 1, XOR(test1)))
print("XOR({}, {}) = {}".format(1, 1, XOR(test2)))
print("XOR({}, {}) = {}".format(0, 0, XOR(test3)))
print("XOR({}, {}) = {}".format(1, 0, XOR(test4)))

import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

def train(X, Y, epochs, learning_rate):
    w1 = np.random.rand(2, 2)
    b1 = np.random.rand(1, 2)
    w2 = np.random.rand(2, 1)
    b2 = np.random.rand(1, 1)

    for epoch in range(epochs):
        z1 = np.dot(X, w1) + b1
        a1 = sigmoid(z1)
        z2 = np.dot(a1, w2) + b2
        a2 = sigmoid(z2)

        error = Y - a2

        d_a2 = error * sigmoid_derivative(a2)
        d_w2 = np.dot(a1.T, d_a2)
        d_b2 = np.sum(d_a2, axis=0)

        d_a1 = np.dot(d_a2, w2.T) * sigmoid_derivative(a1)
        d_w1 = np.dot(X.T, d_a1)
        d_b1 = np.sum(d_a1, axis=0)

        w2 += learning_rate * d_w2
        b2 += learning_rate * d_b2
        w1 += learning_rate * d_w1
        b1 += learning_rate * d_b1

    return w1, b1, w2, b2

def predict(X, w1, b1, w2, b2):
    z1 = np.dot(X, w1) + b1
    a1 = sigmoid(z1)
    z2 = np.dot(a1, w2) + b2
    a2 = sigmoid(z2)
    return np.round(a2)

X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
Y = np.array([[0], [1], [1], [0]])

epochs = 10000
learning_rate = 0.1
w1, b1, w2, b2 = train(X, Y, epochs, learning_rate)

for x, y in zip(X, Y):
    print(f"Input: {x}, Predicted: {predict(x, w1, b1, w2, b2)[0][0]}, Actual: {y[0]}")